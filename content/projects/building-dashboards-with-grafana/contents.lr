_model: project
---
title: Building Dashboards with Grafana
---
body:

### Objectives

* run [InfluxDB](https://github.com/influxdata/influxdb), [Telegraf](https://github.com/influxdata/telegraf), and [Grafana](https://github.com/grafana/grafana) as containers in a single environment managed with [Docker Compose](https://docs.docker.com/compose/);
* define an SNMP input plugin in Telegraf that stores measurements in InfluxDB;
* configure a few SNMP Grafana panels querying InfluxDB.

Note: see [this other page](/projects/installing-docker-on-ubuntu/) to find out how to install Docker on Ubuntu.

### Docker Compose File

I use `docker-compose` to run the 3 containers, here is the current `docker-compose.yml` file (check the Github repository for future changes):

Note: I built [a custom-build Docker image for Telegraf](https://hub.docker.com/r/nuntz/telegraf-snmp/)  because the official one does not include the required SNMP tools.

```yaml
version: '2'

services:
  influxdb:
    image: "influxdb"
    ports:
      - "8086:8086"
      - "8083:8083"
    volumes:
      - ./data/influxdb:/var/lib/influxdb
        
  telegraf:
    image: "nuntz/telegraf-snmp"
    volumes:
      - ./data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    
  grafana:
    image: "grafana/grafana"
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana/lib:/var/lib/grafana
      - ./data/grafana/log:/var/log/grafana
      - ./data/grafana/etc:/etc/grafana
```

Each container has one or more volumes defined for data persistency, in `./data/`:

* `./data/influxdb` for the InfluxDB data;
* `/data/telegraf/telegraf.conf` for the Telegraf configuration file;
* `./data/grafana/lib`, `./data/grafana/log`, and `/data/grafana/etc` for the Grafana data.

The current directory must contain a `data` directory, and two configuration must be created before running the containers:

* `./data/telegraf/telegraf.conf`, which defines the output and input plugins for Telegraf (you can use the default one);
* `./data/grafana/etc/grafana.ini` , which is used to configure Grafana (again, the `defaults.ini` file can be used as a template).

### Running the Containers

The containers can be started using:

```bash
$ sudo docker-compose up
```

### SNMP Configuration for Telegraf

Here is a sample section of the `telegraf.conf` file for a router (with IP address 192.168.1.1), used to collect interface metrics (based on [this example configuration file](https://github.com/influxdata/telegraf/blob/master/plugins/inputs/snmp/CONFIG-EXAMPLES.md)):

```
[[inputs.snmp]]
  agents = [ "192.168.1.1:161" ]
  version = 2
  community = "public"

  [[inputs.snmp.field]]
    name = "hostname"
    oid = ".1.3.6.1.2.1.1.5.0"
    is_tag = true

  # IF-MIB::ifTable contains counters on input and output traffic as well as errors and discards.
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = [ "hostname" ]
    oid = ".1.3.6.1.2.1.2.2"

    # Interface tag - used to identify interface in metrics database
    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = ".1.3.6.1.2.1.2.2.1.2"
      is_tag = true
```

### Creating Panel in Grafana

First, we need to setup the InfluxDB data source:

* Click on the top left menu button and select *Data Sources*;
* Click on the *Add data source* button;
* Fill out the form:
  * Set the name to `Telegraf`;
  * Check the *Default* checkbox;
  * Enter `http://influxdb:8086` in the *Url* field;
  * Finally, enter `telegraf` in *Name*.

We can now create our dashboard:

* Click on the top left menu button and select *Dashboards*;
* Click on the *Home* dashboard button;
* Click on the *Create New* button;
* Click on *Graph* to add a panel;
* Click on the panel title and click *Edit*;
* You can now define your metrics.

Sample metric to poll interface usage:

```
SELECT derivative(mean("ifInOctets"), 10s) FROM "interface" WHERE "ifDescr" = 'eth0' AND $timeFilter GROUP BY time($interval) fill(null)
```
---
status: complete
---
repository: https://github.com/nuntz/grafana-influxdb
